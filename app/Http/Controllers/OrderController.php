<?php

namespace App\Http\Controllers;

use App\Enums\OrderStatus;
use Illuminate\Http\Request;
use App\Models\Order;
use App\Models\OrderDetail;
use App\Models\Cart;
use App\Models\CartItem;
use App\Models\Inventory;
use App\Models\InventoryEntry;
use App\Models\OrderStatusHistory;
use App\Models\PaymentAttempt;
use App\Models\Refund;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use LengthException;

class OrderController extends Controller
{
    public function placeOrder(Request $request)
    {
        $user = User::find(Auth::id());
        if (!$user) {
            return redirect()->route('login')->withErrors('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng.');
        }
        
        if ($user->is_locked && $user->locked_until > now()) {
            return redirect()->route('show.cart')->withErrors('T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng th·ª≠ l·∫°i sau ' . $user->locked_until->format('H:i:s'));
        }
    
        $cartItem = CartItem::whereIn('id', $request->cart_item_ids)->with('skuses')->get();
    
        $total = 0;
        foreach ($cartItem as $item) {
            $total += $item->price * $item->quantity;
        }
    
        $request->validate([
            'shipping_id' => 'required|exists:shipping_methods,id_shipping_method',
            'payment_method' => 'required|exists:payment_methods,id_payment_method',
            'shipping_cost' => 'required|numeric',
            'grand_total' => 'required|numeric',
        ]);
    
        DB::beginTransaction(); // B·∫Øt ƒë·∫ßu transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
    
        try {
            $order = Order::create([
                'id_user' => $user->id,
                'id_address' => $request->address_id,
                'phone_number' => $request->phone_number,
                'id_shipping_method' => $request->shipping_id,
                'id_payment_method' => $request->payment_method,
                'total_amount' => $request->grand_total,
                'id_order_status' => 1, // ƒê∆°n h√†ng m·ªõi
                'id_payment_method_status' => 1, // "Ch∆∞a thanh to√°n"
            ]);
    
            foreach ($cartItem as $item) {
                OrderDetail::create([
                    'id_order' => $order->id,
                    'id_product_variant' => $item->id_product_variant,
                    'quantity' => $item->quantity,
                    'unit_price' => $item->price,
                    'total_price' => $item->quantity * $item->price,
                ]);
            }
    
            // üîπ Ki·ªÉm tra xem ƒë√£ c√≥ PaymentAttempt ch∆∞a (tr√°nh t·∫°o tr√πng)
            $existingAttempt = PaymentAttempt::where('user_id', $user->id)
                ->where('order_id', $order->id)
                ->where('is_completed', false)
                ->first();
    
            if (!$existingAttempt) {
                // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
                $paymentAttempt = PaymentAttempt::create([
                    'user_id' => $user->id,
                    'order_id' => $order->id,
                    'started_at' => now(),
                    'expires_at' => now()->addMinutes(1),
                    'is_completed' => false
                ]);
            }
    
            // üîπ Ki·ªÉm tra n·∫øu t√†i kho·∫£n c·∫ßn b·ªã kh√≥a
            if ($user->failed_attempts >= 3) {
                $user->is_locked = true;
                $user->locked_until = now()->addMinutes(15);
                $user->save();
            }
    
            DB::commit(); // ‚úÖ L∆∞u thay ƒë·ªïi n·∫øu m·ªçi th·ª© ƒë·ªÅu ·ªïn
    
            // üîπ N·∫øu l√† COD, x√≥a cart v√† chuy·ªÉn h∆∞·ªõng
            if ($request->payment_method == 1) {
                CartItem::whereIn('id', $request->cart_item_ids)->delete();
                return redirect()->route('order_success')->with('success', 'ƒê∆°n h√†ng c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c giao COD!');
            }
    
            // üîπ N·∫øu l√† thanh to√°n online, chuy·ªÉn sang PaymentController x·ª≠ l√Ω
            $paymentController = new PaymentController();
            return $paymentController->processPayment($request, $order);
    
        } catch (\Exception $e) {
            DB::rollBack(); // ‚ùå Ho√†n t√°c n·∫øu c√≥ l·ªói
            return redirect()->route('cart.index')->withErrors('L·ªói khi ƒë·∫∑t h√†ng: ' . $e->getMessage());
        }
    }
    

    public function update(Request $request, $orderId)
    {
        $order = Order::with('order_details')->findOrFail($orderId);

        if ($order->id_user !== Auth::id()) {
            return redirect()->back()->with('error', 'B·∫°n kh√¥ng c√≥ quy·ªÅn y√™u c·∫ßu ho√†n h√†ng cho ƒë∆°n h√†ng n√†y.');
        }

        $oldStatus = $order->id_order_status;
        $newStatus = $request->id_order_status;


        if ($newStatus == OrderStatus::SUCCESS) {
            $order->id_payment_method_status = 2;
            $order->id_order_status = $newStatus;
            $order->save();
            OrderStatusHistory::create([
                'order_id' => $order->id,
                'user_id' => Auth::id(),
                'old_status' => $oldStatus,
                'new_status' => $newStatus,
                'note' => 'Kh√°ch h√†ng ƒë√£ nh·∫≠n h√†ng',
            ]);
        } else {
            $order->id_order_status = $newStatus;
            $order->save();
            OrderStatusHistory::create([
                'order_id' => $order->id,
                'user_id' => Auth::id(),
                'old_status' => $oldStatus,
                'new_status' => $newStatus,
                'note' => 'Y√™u c·∫ßu ho√†n h√†ng: ' . $request->reason,
            ]);
            Refund::create([
                'id_order' => $order->id,
                'reason' => $request->reason,
                'refund_amount' => $order->total_amount,
                'refund_quantity' => $order->order_details->sum('quantity'),
                'status' => 'ƒêang ch·ªù x·ª≠ l√Ω'
            ]);
        }
        return redirect()->back()->with('warning', 'ƒêang ch·ªù x√°c nh·∫≠n ho√†n h√†ng t·ª´ shop.');
    }
    public function lockAccount(Request $request)
    {
        try {
            $user = User::find(Auth::id());
            if (!$user) {
                return response()->json(['message' => 'B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!'], 401);
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n
            $user->is_locked = true;
            $user->locked_until = now()->addMinutes(1); // Kh√≥a trong 15 ph√∫t
            $user->update();
            $user->save();

            Log::info("T√†i kho·∫£n b·ªã kh√≥a: " . $user->email);

            return response()->json([
                'message' => 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a do qu√° nhi·ªÅu l·∫ßn th·ª≠ th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t.',
                'attempts_remaining' => 0,
                'redirect' => route('show.cart')
            ]);
        } catch (\Exception $e) {
            Log::error("L·ªói kh√≥a t√†i kho·∫£n: " . $e->getMessage());
            return response()->json(['message' => 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.'], 500);
        }
    }

    public function createPaymentAttempt(Request $request)
    {
        Log::info('üî¥ Request received in createPaymentAttempt', ['user_id' => Auth::id()]);
    
        try {
            $user = User::find(Auth::id());
            if (!$user) {
                Log::warning('üî¥ User not found', ['user_id' => Auth::id()]);
                return response()->json(['message' => 'B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!'], 401);
            }
            if ($user->is_locked && $user->locked_until > now()) {
                Log::warning('üî¥ User is locked', ['user_id' => Auth::id()]);
                return response()->json(['message' => 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng th·ª≠ l·∫°i sau ' . $user->locked_until->format('H:i:s')], 403);
            }
            Log::info('üü¢ User ID:', ['id' => $user->id]);
    
            if ($user->failed_attempts = 3) {
                $user->is_locked = true;
                $user->locked_until = now()->addMinutes(15);
                $user->save();
                Log::warning('üö® User b·ªã kh√≥a', ['user_id' => $user->id]);
                # code...
            }
    
            $paymentAttempt = PaymentAttempt::create([
                'user_id' => Auth::id(),
                'order_id' => null,
                'started_at' => now(),
                'expires_at' => now()->addMinutes(1),
                'is_completed' => false
            ]);
    
            Log::info('üü¢ Payment attempt created', ['id' => $paymentAttempt->id]);
    
            $user->increment('failed_attempts');
            $user->save();


    
            return response()->json([
                'message' => 'Payment attempt created successfully',
                'attempts_remaining' => max(0, 3 - $user->failed_attempts),
                'redirect' => route('show.cart')
            ]);
        } catch (\Exception $e) {
            Log::error('‚ùå L·ªói trong createPaymentAttempt', ['error' => $e->getMessage()]);
    
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

    public function checkStock()
    {
        $cartItems = CartItem::where('id_user', Auth::id())->with('skuses')->get();
        
        if ($cartItems->isEmpty()) {
            return response()->json(['out_of_stock' => false]);
        }
    
        // L·∫•y danh s√°ch t·ªìn kho c·ªßa c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng
        $inventory = Inventory::whereIn('id_product_variant', $cartItems->pluck('id_product_variant'))->get()->keyBy('id_product_variant');
    
    
        foreach ($cartItems as $item) {
            $variantId = $item->id_product_variant;
            
            // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i trong danh s√°ch inventory kh√¥ng
            if (isset($inventory[$variantId])) {
                $stockQuantity = $inventory[$variantId]->quantity;
                // dd($stockQuantity);
    
                // N·∫øu c√≥ h√†ng trong kho nhi·ªÅu h∆°n ho·∫∑c b·∫±ng s·ªë l∆∞·ª£ng gi·ªè h√†ng y√™u c·∫ßu -> ch∆∞a h·∫øt h√†ng
                if ($stockQuantity <= $item->quantity) {
                    $outOfStock = true;
                    break;
                }else{
                    $outOfStock = false;
                }
            }
        }
    
        return response()->json(['out_of_stock' => $outOfStock]);
    }
    

}


